``base_geometry()`` defines a geometry object

1 - Attempt to call function ``area()``
========================================

``area()`` will raise an ``Exception`` exception every time it's called:

>>> BaseGeometry = __import__("7-base_geometry").BaseGeometry
>>> bg = BaseGeometry()
>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented


2 - Attempt to create a BaseGeometry instance with an argument
========================================

>>> bg = BaseGeometry(2)
Traceback (most recent call last):
...
TypeError: BaseGeometry() takes no arguments


3 - Check value with ``integer_validator()``
========================================

``integer_validator()`` will raise a TypeError exception if the value for the name is
not an integer:

>>> bg = BaseGeometry()
>>> bg.integer_validator("height", 2)
>>> bg.integer_validator("width", 4)

>>> bg.integer_validator("Meme", 3.4)
Traceback (most recent call last):
...
TypeError: Meme must be an integer

>>> bg.integer_validator("donut", "54")
Traceback (most recent call last):
...
TypeError: donut must be an integer


Also, the function will raise a ValueError exception if the value is less or equal
than zero:

>>> bg.integer_validator("zero", 0)
Traceback (most recent call last):
...
ValueError: zero must be greater than 0

>>> bg.integer_validator("negative two", -2)
Traceback (most recent call last):
...
ValueError: negative two must be greater than 0


4 - Attempt to call function ``integer_validator()`` with one and three
arguments:
========================================

>>> bg = BaseGeometry()
>>> bg.integer_validator("444")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator("three", 3, 4)
Traceback (most recent call last):
...
TypeError: integer_validator() takes 3 positional arguments but 4 were given

