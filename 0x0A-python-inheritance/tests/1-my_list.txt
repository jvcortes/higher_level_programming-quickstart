``my_list()`` is an example class that extends from ``list``


``print_sorted()`` prints the contents of a MyList list with an ascendant
sorting.

1 - List of integers
========================================

>>> MyList = __import__("1-my_list").MyList
>>> l = MyList([1, 4, 5, 2, 6, 3])
>>> l.print_sorted()
[1, 2, 3, 4, 5, 6]


2 - List of negative numbers
========================================

>>> l = MyList([-2, -4, -1, -12, -6, -3])
>>> l.print_sorted()
[-12, -6, -4, -3, -2, -1]


3 - Mixed negatives and positives
========================================

>>> l = MyList([-2, 4, 1, -25, 0, 2, 7])
>>> l.print_sorted()
[-25, -2, 0, 1, 2, 4, 7]


4 - Empty list
========================================

>>> l = MyList()
>>> l.print_sorted()
[]


5 - List with repeated elements
========================================

>>> l = MyList([5, 5, 5, 5, 5, 5, 5])
>>> l.print_sorted()
[5, 5, 5, 5, 5, 5, 5]


6 - List with repeated elements but with a different one added at the end
========================================

>>> l = MyList([5, 5, 5, 5, 5, 5, 5, 0])
>>> l.print_sorted()
[0, 5, 5, 5, 5, 5, 5, 5]


7 - Try to instance a MyList object with a second argument
========================================

>>> l = MyList([5, 5, 5, 5, 5, 5, 5, 0], [54])
Traceback (most recent call last):
...
TypeError: print_sorted() takes 1 positional argument but 2 were given


8 - Try to call function print_sorted with an argument
========================================

>>> l = MyList([5, 5, 5, 5, 5, 5, 5, 0])
>>> l.print_sorted([42, 33])
Traceback (most recent call last):
...
TypeError: print_sorted() takes 1 positional argument but 2 were given
