``matrix_mul()`` returns the multiplication betwenn two matrixes

1 - Multiplication of matrixes of integers
========================================

``matrix_mul()`` works with two matrixes of integers:

::
	>>> matrix_mul = __import__("100-matrix_mul").matrix_mul
	>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
	[[7, 10], [15, 22]]

2 - Multiplication of matrixes of floating point values:
========================================

``add_integer()`` works with two matrixes of floating points:

::
	>>> matrix_mul([[8.2, 2.4], [2.3, 5.4]], [[0.3, 10.0], [3.1, 7.7]])
	[[9.9, 100.48], [17.43, 64.58]]

3 - Multiplication of matrixes of mixed types 
========================================

``add_integer()`` works with mixed types:

::
	>>> matrix_mul([[11.2, 10], [23, 0]], [[0.34, 20], [2.2, 4]])
	[[25.81, 264.0], [7.82, 460]]

4 - Multiplication of an empty list
========================================

``matrix_mul()`` will throw a TypeError exception if one of the provided lists
is empty:

::

	>>> matrix_mul([], [])
	Traceback (most recent call last):
	ValueError: m_a can't be empty

	>>> matrix_mul([[], []], [[], []])
	Traceback (most recent call last):
	ValueError: m_a can't be empty

	>>> matrix_mul([[]], [[]])
	Traceback (most recent call last):
	ValueError: m_a can't be empty




5 - Unallowed types
========================================

``matrix_mul()`` will not work with types that are different from integers and
floating point values:

::
	>>> matrix_mul([['1', '2'], ['3', 4]], [["22", "10"], ["BB", "3.1416"]])
	Traceback (most recent call last):
	TypeError: m_a should contain only integers or floats

	>>> matrix_mul([[1, 2], [3, 4]], [[22, "10"], ["BB", 3.1416]])
	Traceback (most recent call last):
	TypeError: m_b should contain only integers or floats

6 - Trying to multiply an one-dimensional list
========================================

``matrix_mul()`` will not work with one-dimensional array

::
	>>> matrix_mul([1, 2, 3, 4], [[22, 10], [6, 36]])
	Traceback (most recent call last):
	TypeError: m_a must be a list of lists

	>>> matrix_mul([[1, 2], [3, 4]], [22, 10, 23, 3.1416])
	Traceback (most recent call last):
	TypeError: m_b must be a list of lists

7 - Matrix with rows of unequal sizes:
========================================

``matrix_mul()`` will raise a TypeError exception if one of the two matrixes
don't have the same length in each row:

::
	>>> matrix_mul([[1, 2], [3, 4, 23], [5, 6]], [[22, 10], [0, 16]])
	Traceback (most recent call last):
	TypeError: each row of m_a must be of the same size

	>>> matrix_mul([[1, 2], [3, 4], [5, 6]], [[22, 10], [1], [0, 16]])
	Traceback (most recent call last):
	TypeError: each row of m_b must be of the same size

	>>> matrix_mul([[3, 4], [5, 6]], [[1, 4], []])
	Traceback (most recent call last):
	TypeError: each row of m_b must be of the same size

8 - Trying to multiply non-list types
========================================

``matrix_mul()`` will raise a TypeError exception if one of the parameters
is not a list:

::
	>>> matrix_mul(((1, 2), (3, 4), (5, 6)), [[22, 10], [0, 16]])
	Traceback (most recent call last):
	TypeError: m_a must be a list

	>>> matrix_mul([[1, 2], [3, 4], [5, 6]], "[[22, 10], [1], [0, 16]]")
	Traceback (most recent call last):
	TypeError: m_b must be a list
	
	>>> matrix_mul(88, 98)
	Traceback (most recent call last):
	TypeError: m_a must be a list

9 - Function call with missing parameters
========================================

::
	>>> matrix_mul()
	Traceback (most recent call last):
	TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

	>>> matrix_mul([[1, 2], [3, 4]])
	Traceback (most recent call last):
	TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

10 - Impossible multiplication
========================================

The number of columns of the first matrix should be equal to the number of rows
of the second matrix:

::
	>>> matrix_mul([[1, 2, 3], [2, 4, 6]], [[2, 4, 6], [2, 3, 5], [5, 10, 15], [20, 15, 30]])
	Traceback (most recent call last):
	ValueError: m_a and m_b can't be multiplied
