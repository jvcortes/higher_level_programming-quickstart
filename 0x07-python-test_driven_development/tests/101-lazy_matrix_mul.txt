``lazy_matrix_mul()`` returns the multiplication between two matrices

1 - Multiplication of matrices of integers
========================================

``lazy_matrix_mul()`` works with two matrices of integers:

::
	>>> lazy_matrix_mul = __import__("101-lazy_matrix_mul").lazy_matrix_mul
	>>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
	[[ 7 10]
	 [15 22]]

2 - Multiplication of matrices of floating point values:
========================================

``lazy_matrix_mul()`` works with two matrices of floating points:

::
	>>> print(lazy_matrix_mul([[8.2, 2.4], [2.3, 5.4]], [[0.3, 10.0], [3.1, 7.7]]))
	[[  9.9  100.48]
	 [ 17.43  64.58]]

3 - Multiplication of matrices of mixed types 
========================================

``lazy_matrix_mul()`` works with mixed types:

::
	>>> print(lazy_matrix_mul([[11.2, 10], [23, 0]], [[0.34, 20], [2.2, 4]]))
	[[ 25.808 264.   ]
	 [  7.82  460.   ]]

4 - Multiplication of an empty list
========================================

``lazy_matrix_mul()`` will return zero if one of the provided lists
is empty:

::

	>>> lazy_matrix_mul([], [])
	0.0

4.1 - List of empty lists
========================================

	>>> lazy_matrix_mul([[], []], [[], []])
	Traceback (most recent call last): 
	ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 0)

	>>> lazy_matrix_mul([[]], [[]])
	Traceback (most recent call last):
	ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 0)

5 - Unallowed types
========================================

``lazy_matrix_mul()`` will not work with types that are different from integers and
floating point values:

::
	>>> lazy_matrix_mul([['1', '2'], ['3', 4]], [["22", "10"], ["BB", "3.1416"]])
	Traceback (most recent call last):
	numpy.core._exceptions.UFuncTypeError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('<U6'), dtype('<U6')) -> dtype('<U6')

	>>> lazy_matrix_mul([[1, 2], [3, 4]], [[22, "10"], ["BB", 3.1416]])
	Traceback (most recent call last):
	numpy.core._exceptions.UFuncTypeError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('<U21'), dtype('<U21')) -> dtype('<U21')

6 - Trying to multiply an one-dimensional list
========================================

``lazy_matrix_mul()`` will not work with one-dimensional arrays

::
	>>> lazy_matrix_mul([1, 2, 3, 4], [[22, 10], [6, 36]])
	Traceback (most recent call last):
	ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 4)

	>>> lazy_matrix_mul([[1, 2], [3, 4]], [22, 10, 23, 3.1416])
	Traceback (most recent call last):
	ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 4 is different from 2)

7 - Matrix with rows of unequal sizes:
========================================

``lazy_matrix_mul()`` will raise a ValueError if the size of the rows of a matrix are unequal:

::
	>>> lazy_matrix_mul([[1, 2], [3, 4, 23], [5, 6]], [[22, 10], [0, 16]])
	Traceback (most recent call last):
	ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 3)

	>>> lazy_matrix_mul([[1, 2], [3, 4], [5, 6]], [[22, 10], [1], [0, 16]])
	Traceback (most recent call last):
	ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 3 is different from 2)

	>>> lazy_matrix_mul([[3, 4], [5, 6]], [[1, 4], []])
	array([list([1, 4, 1, 4, 1, 4]), list([1, 4, 1, 4, 1, 4, 1, 4, 1, 4])],
              dtype=object)

8 - Trying to multiply non-list types
========================================

``lazy_matrix_mul()`` will work with tuples:

::
	>>> lazy_matrix_mul(((1, 2), (3, 4), (5, 6)), [[22, 10], [0, 16]])
	array([[ 22,  42],
               [ 66,  94],
               [110, 146]])

``lazy_matrix_mul()`` won't work with strings and integers:

	>>> lazy_matrix_mul([[1, 2], [3, 4], [5, 6]], "[[22, 10], [1], [0, 16]]")
	Traceback (most recent call last):
	ValueError: matmul: Input operand 1 does not have enough dimensions (has 0, gufunc core with signature (n?,k),(k,m?)->(n?,m?) requires 1)
	
	>>> lazy_matrix_mul(88, 98)
	Traceback (most recent call last):
	ValueError: matmul: Input operand 0 does not have enough dimensions (has 0, gufunc core with signature (n?,k),(k,m?)->(n?,m?) requires 1)

9 - Function call with missing parameters
========================================

::
	>>> lazy_matrix_mul()
	Traceback (most recent call last):
	TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

	>>> lazy_matrix_mul([[1, 2], [3, 4]])
	Traceback (most recent call last):
	TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

10 - Impossible multiplication
========================================

The number of columns of the first matrix should be equal to the number of rows
of the second matrix:

::
	>>> lazy_matrix_mul([[1, 2, 3], [2, 4, 6]], [[2, 4, 6], [2, 3, 5], [5, 10, 15], [20, 15, 30]])
	Traceback (most recent call last):
	ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 4 is different from 3)

